{"version":3,"sources":["components/Client.js","components/Numbers.js","App.js","serviceWorker.js","index.js"],"names":["Client","Promise","resolve","reject","request","XMLHttpRequest","open","onreadystatechange","readyState","DONE","status","objectified","raw","responseText","length","JSON","parse","send","Numbers","props","client","state","numbers","me","then","r","setState","console","log","this","map","n","index","key","React","Component","App","className","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gPAEqBA,E,kGAwBb,OAtBa,IAAIC,SAAQ,SAACC,EAASC,GAC/B,IAAIC,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAM,2FACnBF,EAAQG,mBAAqB,WACzB,GAAGH,EAAQI,aAAeH,eAAeI,KAAM,CAC3C,IAAIC,EAASN,EAAQM,OACrB,GAAe,IAAXA,GAAiB,KAAOA,GAAUA,EAAS,IAAM,CAEjD,IAAIC,EAAc,GACdC,EAAMR,EAAQS,aACdD,EAAIE,OAAO,IACXH,EAAcI,KAAKC,MAAMJ,IAE7BV,EAAQS,QAGRR,MAIZC,EAAQa,c,KCpBCC,E,YAEjB,WAAaC,GAAO,IAAD,uBACf,4CAAMA,KACDC,OAAS,IAAIpB,EAClB,EAAKqB,MAAQ,CAACC,QAAQ,IACtB,IAAIC,EAAE,eAJS,OAKf,EAAKH,OAAOE,UAAUE,MAAM,SAAAC,GAAC,OAAIF,EAAGG,SAAS,CAACJ,QAASG,OALxC,E,sEAUf,OADAE,QAAQC,IAAI,kBAAmBC,KAAKR,MAAMC,SACnC,wDACH,iCAEQO,KAAKR,MAAMC,QAAQQ,KAAI,SAACC,EAAEC,GAAH,OAAa,yBAAKC,IAAKD,GAASD,Y,GAftCG,IAAMC,WCqB5BC,MApBf,WAGE,OADET,QAAQC,IAAI,8BAEZ,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,uBACEA,UAAU,WACVC,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,sBASF,kBAAC,EAAD,QCRcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.068e4b4d.chunk.js","sourcesContent":["\n\nexport default class Client {\n    numbers(){\n        let result = new Promise((resolve, reject) => {\n            let request = new XMLHttpRequest();\n            request.open(\"GET\",\"http://wildfly-app-wildfly-demo.apps-crc.testing/jaxrs-postgresql-demo/api/rest/numbers\");\n            request.onreadystatechange = () => {\n                if(request.readyState === XMLHttpRequest.DONE) { // 4\n                    var status = request.status;\n                    if (status === 0 || (200 <= status && status < 400)) {\n                        // The request has been completed successfully\n                        let objectified = [];\n                        let raw = request.responseText;\n                        if (raw.length>0){\n                            objectified = JSON.parse(raw);\n                        }\n                        resolve(objectified);\n                    } else {\n                        // Oh no! There has been an error with the request!\n                        reject();\n                    }\n                }\n            }\n            request.send();\n        });\n        return result;\n    }\n}\n","import React from 'react';\nimport Client from './Client';\n\n\nexport default class Numbers extends React.Component {\n\n    constructor (props){\n        super(props);\n        this.client = new Client();\n        this.state = {numbers:[]};\n        var me = this;\n        this.client.numbers().then (r => me.setState({numbers: r}));\n    }\n\n    render (){\n        console.log('render numbers ', this.state.numbers);\n        return <div>access numbers from REST\n            <section>\n                {\n                    this.state.numbers.map((n,index) => <div key={index} >{n}</div>)\n                }\n            </section>\n\n        </div>;\n    }\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Numbers from './components/Numbers';\n\nfunction App() {\n    var smeg=process.env.REACT_APP_PUBLIC_URL;\n    console.log('smeg' + smeg);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          React Shinanigans\n        </a>\n      </header>\n      <Numbers />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}